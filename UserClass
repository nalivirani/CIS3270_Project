//User Class

package database;

import java.sql.*;

public class User extends Database {
	
	protected static final String TABLE = "user";
	private int ssn;
	protected String fName;
	protected String lName;
	protected String address;
	protected int zip;
	protected String state;
	protected String userName;
	private String password;
	protected String email;
	protected String securityQuestion;
	private String securityAnswer;
	protected int permissionLevel;
	
	public User() {
	}
	
	public User(int ssn, String fName, String lName, String address, int zip, String state, String username, String password, String email, String securityQuestion, String securityAnswer) {
		this.ssn = ssn;
		this.fName = fName;
		this.lName = lName;
		this.address = address;
		this.zip = zip;
		this.state = state;
		this.userName = username;
		this.password = password;
		this.email = email;
		this.securityQuestion = securityQuestion;
		this.securityAnswer = securityAnswer;
	}

	public int getSsn() {
		return ssn;
	}

	public String getfName() {
		return fName;
	}

	public void setfName(String fName) {
		this.fName = fName;
	}

	public String getlName() {
		return lName;
	}

	public void setlName(String lName) {
		this.lName = lName;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public int getZip() {
		return zip;
	}

	public void setZip(int zip) {
		this.zip = zip;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getSecurityQuestion() {
		return securityQuestion;
	}

	public void setSecurityQuestion(String securityQuestion) {
		this.securityQuestion = securityQuestion;
	}

	public String getSecurityAnswer() {
		return securityAnswer;
	}

	public void setSecurityAnswer(String securityAnswer) {
		this.securityAnswer = securityAnswer;
	}

	public int getPermissionLevel() {
		return permissionLevel;
	}

	public void setPermissionLevel(int permissionLevel) {
		this.permissionLevel = permissionLevel;
	}
/* **********************************************************************************
 * *-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/*
 * **********************************************************************************/	
	public void updateFname(int ssn, String newFname) {
		this.fName = newFname;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set FirstName = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newFname);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}
	
	public void updateLname(int ssn, String newLname) {
		this.lName = newLname;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set LastName = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newLname);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateAddress(int ssn, String newAddress) {
		this.address = newAddress;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set Address = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newAddress);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateZip(int ssn, int newZip) {
		this.zip = newZip;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set zip = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setInt(1, newZip);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateState(int ssn, String newState) {
		this.state = newState;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set State = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newState);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateUsername(int ssn, String newUsername) {
		this.userName = newUsername;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set UserName = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newUsername);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updatePassword(int ssn, String newPassword) {
		this.password = newPassword;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set Password = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newPassword);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}
	public void updateEmail(int ssn, String newEmail) {
		this.email = newEmail;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set email = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newEmail);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateSecQuestion(int ssn, String newSecQuestion) {
		this.securityQuestion = newSecQuestion;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set SecurityQuestion = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newSecQuestion);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public void updateSecAnswer(int ssn, String newSecAnswer) {
		this.setSecurityAnswer(newSecAnswer);
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String update = "update user set SecurityAnswer = ? where SSN = ?";
		
			PreparedStatement userUpdate = c.prepareStatement(update);
			userUpdate.setString(1, newSecAnswer);
			userUpdate.setInt(2, ssn);
			
			userUpdate.executeUpdate();
		}
		
		catch(Exception e) {
			
		}
	}

	public String updatePermission(int ssn, String adminOverridePassowrd) {
		if (adminOverridePassowrd.equals("zaq12wsxZAQ!@WSX")) {
			
			try {
				Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
			
				String update = "update user set PermissionLevel = ? where SSN = ?";
			
				PreparedStatement userUpdate = c.prepareStatement(update);
				userUpdate.setInt(1, 1);
				userUpdate.setInt(2, ssn);
				
				userUpdate.executeUpdate();
				
				this.permissionLevel = 1;
				return "Your account privileges have been upgraded to admin capabilites.";
			}	
			
			catch(Exception e) {
				return "something went wrong, please try again.";
			}
		}
		
		else return "The admin override password entered was invalid.";
	}
	
	@SuppressWarnings("finally")
	public boolean isNewUser(int ssn) {
		boolean b = false;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String query = "select * from user Where SSN=?";
		
			PreparedStatement userQuery = c.prepareStatement(query);
			userQuery.setInt(1, ssn);
		
			ResultSet rs = userQuery.executeQuery();
			
			if (!rs.next()) {
				b = true;
			}
			
			else b = false;
		}
		
			catch(Exception e) {
			}
		
		finally {
			return b;
		}
	}
	
	@SuppressWarnings("finally")
	public boolean isNewUser(String username) {
		boolean b = false;
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String query = "select * from user Where username=?";
		
			PreparedStatement userQuery = c.prepareStatement(query);
			userQuery.setString(1, username);
		
			ResultSet rs = userQuery.executeQuery();
			
			if (!rs.next()) {
				b = true;
			}
			
			else b = false;
		}
		
			catch(Exception e) {
			}
		
		finally {
			return b;
		}
	}
	
	public void pQuery(String username) {
		
		System.out.println("\nDatabase: " + super.schema +"\nTable: " + User.TABLE);
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String query = "select * from user Where Username=?";
		
			PreparedStatement userQuery = c.prepareStatement(query);
			userQuery.setString(1, username);
		
			ResultSet rs = userQuery.executeQuery();
		
			while (rs.next()) {
		
				int ssn = rs.getInt("SSN");
				String firstName = rs.getString("FirstName");
				String lastName = rs.getString("LastName");
				String address = rs.getString("address");
				int zip = rs.getInt("zip");
				String state = rs.getString("State");
				String userName = rs.getString("UserName");
				String password = rs.getString("Password");
				String email = rs.getString("email");
				String securityQuestion = rs.getString("SecurityQuestion");
				String securityAnswer = rs.getString("SecurityAnswer");
				int permission = rs.getInt("PermissionLevel");
				
				System.out.println("\n   SSN  |  FName | LName |    address    | zip |State|  uName  |  Password  |       email       | SecurityQuestion |        SecurityAnswer        | Admin? |");
				
				System.out.print(ssn + ",  " + firstName + ", " + lastName + ", " + address + ", " + zip + ", " 
						   + state + ", " + userName + ", " + password + ", " + email + ", " + securityQuestion + ", " 
						   + securityAnswer + ", " + permission);
			}
			
			if (!rs.next()) {
				System.out.println("No records were found that match the input given");
			}
		}
		
		catch (Exception e) {
			e.printStackTrace();
		}
		
		finally {
			System.out.println("\n");
		}
	}
	
	public void register() {
		
		try {
			
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String insertStatement = "insert into user (SSN, FirstName, LastName, address, zip, State, Username, Password, email, " +
				 "SecurityQuestion, SecurityAnswer) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
			PreparedStatement userInsert = c.prepareStatement(insertStatement);
		
			userInsert.setInt   (1, this.ssn);
			userInsert.setString(2, this.fName);
			userInsert.setString(3, this.lName);
			userInsert.setString(4, this.address);
			userInsert.setInt   (5, this.zip);
			userInsert.setString(6, this.state);
			userInsert.setString(7, this.userName);
			userInsert.setString(8, this.password);
			userInsert.setString(9, this.email);
			userInsert.setString(10,this.securityQuestion);
			userInsert.setString(11,this.securityAnswer);
			
			userInsert.executeUpdate();
		}
		
		catch (Exception e){
			e.printStackTrace();		
		}
	}
	
	public void register(int ssn, String fName, String lName, String address, int zip, String state, String userName, String password, String email, String securityQuestion, String securityAnswer) {
		
		try {
			
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String insertStatement = "insert into user (SSN, FirstName, LastName, address, zip, State, Username, Password, email, " +
				 "SecurityQuestion, SecurityAnswer) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
			PreparedStatement userInsert = c.prepareStatement(insertStatement);
		
			userInsert.setInt   (1, ssn);
			userInsert.setString(2, fName);
			userInsert.setString(3, lName);
			userInsert.setString(4, address);
			userInsert.setInt   (5, zip);
			userInsert.setString(6, state);
			userInsert.setString(7, userName);
			userInsert.setString(8, password);
			userInsert.setString(9, email);
			userInsert.setString(10,securityQuestion);
			userInsert.setString(11,securityAnswer);
			
			userInsert.executeUpdate();
		}
		
		catch (Exception e){
			e.printStackTrace();		
		}
	}
	
	public String passwordRecover(String username, String securityAnswer) {
		
		String sA = "";
		String p = "";
		
		try {
			Connection c = DriverManager.getConnection(super.getConnectionID(), super.getDBusername(), super.getDBpassword());
		
			String query = "select password, securityAnswer from user Where Username=?";
		
			PreparedStatement userQuery = c.prepareStatement(query);
			userQuery.setString(1, username);
		
			ResultSet rs = userQuery.executeQuery();
			
			while (rs.next()) {
				p = rs.getString("Password");
				sA = rs.getString("SecurityAnswer");
			}
			
			if (securityAnswer.equalsIgnoreCase(sA)) {
			  return p;
			}
			
		    else p = "Your answer to the security question was invalid";
		}
		
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return p;
	}
}
